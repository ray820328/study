
/etc/init.d/mysqld start/stop

set character_set_connection = 'utf8';
set character_set_results = 'utf8';
set character_set_client = 'utf8';
set names gbk

/etc/rc.d/init.d/mysqld
MYOPTIONS="$MYOPTIONS --skip-grant-tables --skip-networking"

/usr/bin/mysqld_safe --skip-grant-tables &
use mysql;
update user set password=password('pwd') where user='root';
flush privileges;
exit;

--------------------------------------centos6安装mysql5.5-----------------------------------
yum list installed | grep -i mysql
yum remove mysql mysql-*
find / -name mysql
rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm

yum --enablerepo=remi,remi-test install mysql mysql-server

yum list installed | grep -i mysql

/etc/init.d/mysqld start ## use restart after update
OR
service mysqld start ## use restart after update

chkconfig --levels 235 mysqld on

Last
mysql_upgrade -u root -p
Now my MySql version is 5.5.32

修改数据路径问题解决
【centos  Can't create table 'db' (errno: 13)】
setenforce 0
getenforce
【重启后需要再执行】
chown -R mysql /data/mysql/data
chgrp -R mysql /data/mysql/data
【Fatal error: Can't open and lock privilege tables: Table 'mysql.host' doesn't exist】
mysql_install_db --user=mysql


修改数据路径
>1、使用命令service mysqld stop 停止mysql
查看mysql数据库的默认路径：/var/lib/mysql
使用cp -afir  /var/lib/mysql/*   /usr/local/mysql
这里的a f i r参数具体指什么请查看cp的帮助
2、更改my.cnf
使用命令：vim /etc/my.cnf
把其中的datadir更改为新的路径
datadir=/usr/local/mysql
为保证MySQL能够正常，需要指明mysql.sock文件的产生位置。
#socket　 = /var/lib/mysql/mysql.sock（原内容，为了更稳妥用“#”注释此行）
socket　 = /usr/local/mysql/mysql.sock　（加上此行）
3、修改MySQL启动脚本/etc/init.d/mysqld，
把其中datadir=/var/lib/mysql一行改成你现在的实际存放路径/usr/local/mysql
[root@test1 etc]# vi　/etc/init.d/mysqld
#datadir=/var/lib/mysql（注释此行）
datadir=/usr/local/mysql （加上此行）
5、ln -s /usr/local/mysql/mysql.sock /var/lib/mysql/mysql.sock
给mysql.sock建立一个软链接，否则会提示找不到/var/lib/mysql/mysql.sock
6、重启mysqld
service mysqld restart

-------------------------------------------------------------------------

GRANT ALL PRIVILEGES ON *.* TO root@localhost IDENTIFIED BY 'admin' WITH GRANT OPTION; 
GRANT ALL PRIVILEGES ON *.* TO root@"%" IDENTIFIED BY 'admin' WITH GRANT OPTION;
flush privileges;
delete from `mysql`.`user` where user='';
use mysql
select host,user,password from user;

-------------------------------------------------------------------------
忘记root密码
1、先结束mysqld进程
#killall mysqld

不加载grant_tables而进入mysql
#mysqld_safe --skip-grant-tables &

进入mysql
mysql> use mysql
Database changed

mysql> select * from user;
Empty set (0.00 sec)

mysql> insert into user set user='root',ssl_cipher='',x509_issuer='',x509_subject='';               
(增加root用户的表）
Query OK, 1 row affected, 3 warnings (0.00 sec)
(这时可能会提示某字段如ssl_cipher无默认值,　只要加上,ssl_cipher=''; 其字段如有提示依次添加就OK了)
update user set Host='localhost',select_priv='y', insert_priv='y',update_priv='y', Alter_priv='y',delete_priv='y',create_priv='y',drop_priv='y',reload_priv='y',shutdown_priv='y',Process_priv='y',file_priv='y',grant_priv='y',References_priv='y',index_priv='y',create_user_priv='y',show_db_priv='y',super_priv='y',create_tmp_table_priv='y',Lock_tables_priv='y',execute_priv='y',repl_slave_priv='y',repl_client_priv='y',create_view_priv='y',show_view_priv='y',create_routine_priv='y',alter_routine_priv='y',create_user_priv='y' where user='root';                            
(这里面是修改root用户的权限)
mysql> quit;

2、带权限正常启动mysql
#service mysqld start
其他启动方式启动
 /usr/libexec/mysqld --skip-grant &
 或者/etc/init.d/mysqld start

数据表损坏修复，存储过程丢失修复；
repair table proc;

【--lock-tables=false】
mysqldump --opt jira_prod --host=127.0.0.1 -P 3306 --user=root --password=admin --default-character-set=utf8 > jira_prod.sql
mysql --host=10.10.84.18 -P 3306 --user=root --password=admin --default-character-set=utf8 jira_prod < jira_prod.sql


-------------------------------------配置文件【/etc/my.cnf】-------------------------------------

[mysqld]
datadir=/home/mysql/data
socket=/var/lib/mysql/mysql.sock
#innodb_force_recovery=1
max_connections=1000
max_allowed_packet=128M
skip-name-resolve
net_write_timeout=60
lower_case_table_names=1

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

# Settings user and group are ignored when systemd is used (fedora >= 15).
# If you need to run mysqld under a different user or group,
# customize your systemd unit file for mysqld according to the
# instructions in http://fedoraproject.org/wiki/Systemd
user=mysql

# Semisynchronous Replication
# http://dev.mysql.com/doc/refman/5.5/en/replication-semisync.html
# uncomment next line on MASTER
;plugin-load=rpl_semi_sync_master=semisync_master.so
# uncomment next line on SLAVE
;plugin-load=rpl_semi_sync_slave=semisync_slave.so

# Others options for Semisynchronous Replication
;rpl_semi_sync_master_enabled=1
;rpl_semi_sync_master_timeout=10
;rpl_semi_sync_slave_enabled=1

# http://dev.mysql.com/doc/refman/5.5/en/performance-schema.html
;performance_schema

#max_allowed_packet=500M
#net_write_timeout=1800
#bind-address=127.0.0.1

[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid


#
# include all files from the config directory
#
!includedir /etc/my.cnf.d


-------------------------优化---------------------
# MySQL Server Instance Configuration File
[client]
port=3306

[mysql]
default-character-set=gbk

[mysqld]
port=3306
basedir="C:/mysql50/"
datadir="C:/mysql50/Data/"
default-character-set=gbk
default-storage-engine=INNODB
sql-mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"
max_connections=100

query_cache_size=0
table_cache=256
tmp_table_size=50M
thread_cache_size=8
myisam_max_sort_file_size=100G
myisam_max_extra_sort_file_size=100G
myisam_sort_buffer_size=100M
key_buffer_size=82M
read_buffer_size=64K
read_rnd_buffer_size=256K
sort_buffer_size=256K

innodb_additional_mem_pool_size=4M
innodb_flush_log_at_trx_commit=0
innodb_log_buffer_size=2M
innodb_buffer_pool_size=1024M
innodb_log_file_size=80M
innodb_thread_concurrency=8

性能优化
innodb_flush_log_at_trx_commit=0/默认1
innodb_buffer_pool_size=1024M/默认159M

-------------------------------------win7注册服务------------------------------------
将mysql注册为windows系统服务
具体操作是在命令行中执行以下命令（需要以管理员身份运行命令行）：
需要切换到bin目录，否则，会将服务目录指定为C:\Program Files\MySQL\MySQL Server 5.7\mysqld
增加服务命令：mysqld install MySQL --defaults-file="D:\mysql\mysql-5.7.5-m15-winx64\my.ini" 
移除服务命令为：mysqld remove

-------------------------------------高级使用------------------------------------

Mysql5.0以上的版本可以支持将执行比较慢的SQL语句记录下来。
mysql> show variables like 'long%'; 注：这个long_query_time是用来定义慢于多少秒的才算“慢查询”
+-----------------+-----------+
| Variable_name | Value |
+-----------------+-----------+
| long_query_time | 10.000000 |
+-----------------+-----------+
1 row in set (0.00 sec)
mysql> set long_query_time=1; 注： 我设置了1, 也就是执行时间超过1秒的都算慢查询。
Query OK, 0 rows affected (0.00 sec)
mysql> show variables like 'slow%';
+---------------------+---------------+
| Variable_name | Value |
+---------------------+---------------+
| slow_launch_time | 2 |
| slow_query_log | ON | 注：是否打开日志记录
| slow_query_log_file | /tmp/slow.log | 注： 设置到什么位置
+---------------------+---------------+
3 rows in set (0.00 sec)
mysql> set global slow_query_log='ON' 注：打开日志记录
一旦slow_query_log变量被设置为ON，mysql会立即开始记录。
/etc/my.cnf 里面可以设置上面MYSQL全局变量的初始值。
long_query_time=1
slow_query_log_file=/tmp/slow.log


/path/mysqldumpslow -s c -t 10 /tmp/slow-log
这会输出记录次数最多的10条SQL语句，其中：
-s, 是表示按照何种方式排序，c、t、l、r分别是按照记录次数、时间、查询时间、返回的记录数来排序，ac、at、al、ar，表示相应的倒叙；
-t, 是top n的意思，即为返回前面多少条的数据；
-g, 后边可以写一个正则匹配模式，大小写不敏感的；
比如
/path/mysqldumpslow -s r -t 10 /tmp/slow-log
得到返回记录集最多的10个查询。
/path/mysqldumpslow -s t -t 10 -g “left join” /tmp/slow-log
得到按照时间排序的前10条里面含有左连接的查询语句。


init配置慢查询
1、在my.ini配置文件中添加以下选项：

log-slow-queries=master-0-slow.log 慢查询日志位置

log-queries-not-using-indexes=on  没有使用索引的Query也计入慢查询日志

long_query_time=1  当Query语句大于1秒时记入慢查询日志

--> linux下mysql开启慢查询方法:

mysql在linux系统中的配置文件一般是my.cnf,我的路径是/etc/my.cnf,你根据自己编译安装的路径去查找 vi /etc/my.cnf

一样是在[mysqld]下面加上：

log-slow-queries=/var/lib/mysql/slowquery.log

long_query_time=2

log-queries-not-using-indexes

这里就不再解释了,加上后重启mysql,就可以到/var/lib/mysql下看是否有slowquery.log生成了. cd /var/lib/mysql/





mysql 查询语句分析

　一.语法

　　explain < table_name >

　　例如: explain select * from t3 where id=3952602;


　1.我的理解是SQL执行的顺利的标识,SQL从大到小的执行.

　　例如:

    mysql> explain select * from (select * from ( select * from t3 where id=3952602) a) b; 
　　+----+-------------+------------+--------+-------------------+---------+---------+------+------+-------+ 
　　| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra | 
　　+----+-------------+------------+--------+-------------------+---------+---------+------+------+-------+ 
　　| 1 | PRIMARY | | system | NULL | NULL | NULL | NULL | 1 | | 
　　| 2 | DERIVED | | system | NULL | NULL | NULL | NULL | 1 | | 
　　| 3 | DERIVED | t3 | const | PRIMARY,idx_t3_id | PRIMARY | 4 | | 1 | | 
　　+----+-------------+------------+--------+-------------------+---------+---------+------+------+-------+


　　很显然这条SQL是从里向外的执行,就是从id=3 向上执行. 这一点和oracle有些象，就是语句的执行次序。


   2. select_type就是select类型,可以有以下几种

　　(1) SIMPLE

　　简单SELECT(不使用UNION或子查询等) 例如:　


   3.table

　　显示这一行的数据是关于哪张表的.

　　有时不是真实的表名字,看到的是derivedx(x是个数字,我的理解是第几步执行的结果)　

　 4.type

　　这列很重要,显示了连接使用了哪种类别,有无使用索引.

　　从最好到最差的连接类型为const、eq_reg、ref、range、indexhe和ALL

    (1).system

　　这是const联接类型的一个特例。表仅有一行满足条件.如下(t3表上的id是 primary key)

    mysql> explain select * from (select * from t3 where id=3952602) a ; 
　　+----+-------------+------------+--------+-------------------+---------+---------+------+------+-------+ 
　　| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra | 
　　+----+-------------+------------+--------+-------------------+---------+---------+------+------+-------+ 
　　| 1 | PRIMARY | | system | NULL | NULL | NULL | NULL | 1 | | 
　　| 2 | DERIVED | t3 | const | PRIMARY,idx_t3_id | PRIMARY | 4 | | 1 | | 
　　+----+-------------+------------+--------+-------------------+---------+---------+------+------+-------+

　  (2).const

　　表最多有一个匹配行，它将在查询开始时被读取。因为仅有一行，在这行的列值可被优化器剩余部分认为是常数。const表很快，因为它们

只读取一次!

　　const用于用常数值比较PRIMARY KEY或UNIQUE索引的所有部分时。


    (3). eq_ref

　　对于每个来自于前面的表的行组合，从该表中读取一行。这可能是最好的联接类型，除了const类型。它用在一个索引的所有部分被联接使

用并且索引是UNIQUE或PRIMARY KEY。

　　eq_ref可以用于使用= 操作符比较的带索引的列。比较值可以为常量或一个使用在该表前面所读取的表的列的表达式。

    (4).ref

　　对于每个来自于前面的表的行组合，所有有匹配索引值的行将从这张表中读取。如果联接只使用键的最左边的前缀，或如果键不是UNIQUE

或PRIMARY KEY(换句话说，如果联接不能基于关键字选择单个行的话)，则使用ref。如果使用的键仅仅匹配少量行，该联接类型是不错的。

　　ref可以用于使用=或<=>操作符的带索引的列。


   (5). ref_or_null

　　该联接类型如同ref，但是添加了MySQL可以专门搜索包含NULL值的行。在解决子查询中经常使用该联接类型的优化。


   (6). index_merge

　　该联接类型表示使用了索引合并优化方法。在这种情况下，key列包含了使用的索引的清单，key_len包含了使用的索引的最长的关键元素

。

   (8).index_subquery

　　该联接类型类似于unique_subquery。可以替换IN子查询，但只适合下列形式的子查询中的非唯一索引：

value IN (SELECT key_column FROM single_table WHERE some_expr)


　　(9).range

　　只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引。key_len包含所使用索引的最长关键元素。在该类型中ref列为

NULL。

　　当使用=、<>、>、>=、<、<=、IS NULL、<=>、BETWEEN或者IN操作符，用常量比较关键字列时，可以使用range


    　5.possible_keys

　　possible_keys列指出MySQL能使用哪个索引在该表中找到行。注意，该列完全独立于EXPLAIN输出所示的表的次序。这意味着在

possible_keys中的某些键实际上不能按生成的表次序使用。

　　如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。

如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询

　　6. key

　　key列显示MySQL实际决定使用的键(索引)。如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询

中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。

　　7.key_len

　　key_len列显示MySQL决定使用的键长度。如果键是NULL，则长度为NULL。

　　使用的索引的长度。在不损失精确性的情况下，长度越短越好

　　8. ref

　　ref列显示使用哪个列或常数与key一起从表中选择行。

　　9. rows

　　rows列显示MySQL认为它执行查询时必须检查的行数。

　　10. Extra

　　该列包含MySQL解决查询的详细信息,下面详细.

　　(1).Distinct

　　一旦MYSQL找到了与行相联合匹配的行，就不再搜索了

　　(2).Not exists

　　MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，

　　就不再搜索了

　　(3).Range checked for each

　　Record(index map:#)

　　没有找到理想的索引，因此对于从前面表中来的每一个行组合，MYSQL检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的

连接之一

　　(4).Using filesort

　　看到这个的时候，查询就需要优化了。MYSQL需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条

件的全部行的行指针来排序全部行

　　(5).Using index

　　列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候

　　(6).Using temporary

　　看到这个的时候，查询需要优化了。这里，MYSQL需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是

GROUP BY上

　　(7).Using where

　　使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生

，或者是查询有问题

  
  
  ------------------------------------------mysql优化--------------------------------------------
  
  mysql> show global status; 本文由飞翔的猪圈编辑整理。
　　可以列出MySQL服务器运行各种状态值，另外，查询MySQL服务器配置信息语句：
mysql> show variables;
一、慢查询
mysql> show variables like ‘%slow%‘;
+------------------+-------+
| Variable_name　　　　 | Value |
+------------------+-------+
| log_slow_queries | ON　　　　 |
| slow_launch_time | 2　　　　　 |
+------------------+-------+

mysql> show global status like ‘%slow%‘;
+---------------------+-------+
| Variable_name　　　　　　　 | Value |
+---------------------+-------+
| Slow_launch_threads | 0　　　　　 |
| Slow_queries　　　　　　　　 | 4148 |
+---------------------+-------+
配置中打开了记录慢查询，执行时间超过2秒的即为慢查询，系统显示有4148个慢查询，你可以分析慢查询日志，找出有问题的SQL语句，慢查询时间不宜设置过长，否则意义不大，最好在5秒以内，如果你需要微秒级别的慢查询，可以考虑给MySQL打补丁：http://www.percona.com/docs/wiki/release:start，记得找对应的版本。
打开慢查询日志可能会对系统性能有一点点影响，如果你的MySQL是主－从结构，可以考虑打开其中一台从服务器的慢查询日志，这样既可以监控慢查询，对系统性能影响又小。
二、连接数
经常会遇见”MySQL: ERROR 1040: Too many connections”的情况，一种是访问量确实很高，MySQL服务器抗不住，这个时候就要考虑增加从服务器分散读压力，另外一种情况是MySQL配置文件中max_connections值过小：
mysql> show variables like ‘max_connections‘;
+-----------------+-------+
| Variable_name　　　 | Value |
+-----------------+-------+
| max_connections | 256　　 |
+-----------------+-------+
这台MySQL服务器最大连接数是256，然后查询一下服务器响应的最大连接数：
mysql> show global status like ‘Max_used_connections‘;
MySQL服务器过去的最大连接数是245，没有达到服务器连接数上限256，应该没有出现1040错误，比较理想的设置是
Max_used_connections / max_connections * 100% ≈ 85%
最大连接数占上限连接数的85％左右，如果发现比例在10%以下，MySQL服务器连接数上限设置的过高了。
三、Key_buffer_size
key_buffer_size是对MyISAM表性能影响最大的一个参数，下面一台以MyISAM为主要存储引擎服务器的配置：
mysql> show variables like ‘key_buffer_size‘;+-----------------+------------+
| Variable_name　　　 | Value　　　　　　 |
+-----------------+------------+
| key_buffer_size | 536870912 |
+-----------------+------------+
分配了512MB内存给key_buffer_size，我们再看一下key_buffer_size的使用情况：
mysql> show global status like ‘key_read%‘;
+------------------------+-------------+
| Variable_name　　　　　　　　　　 | Value　　　　　　　 |
+------------------------+-------------+
| Key_read_requests　　　　　　 | 27813678764 |
| Key_reads　　　　　　　　　　　　　　 | 6798830　　　　　 |
+------------------------+-------------+
　　一共有27813678764个索引读取请求，有6798830个请求在内存中没有找到直接从硬盘读取索引，计算索引未命中缓存的概率：
key_cache_miss_rate ＝ Key_reads / Key_read_requests * 100%
比如上面的数据，key_cache_miss_rate为0.0244%，4000个索引读取请求才有一个直接读硬盘，已经很BT了，key_cache_miss_rate在0.1%以下都很好（每1000个请求有一个直接读硬盘），如果key_cache_miss_rate在0.01%以下的话，key_buffer_size分配的过多，可以适当减少。
MySQL服务器还提供了key_blocks_*参数：
mysql> show global status like ‘key_blocks_u%‘;
+------------------------+-------------+
| Variable_name　　　　　　　　　　 | Value　　　　　　　 |
+------------------------+-------------+
| Key_blocks_unused　　　　　　 | 0　　　　　　　　　　　 |
| Key_blocks_used　　　　　　　　 | 413543　　　　　　 |
+------------------------+-------------+
Key_blocks_unused表示未使用的缓存簇(blocks)数，Key_blocks_used表示曾经用到的最大的blocks数，比如这台服务器，所有的缓存都用到了，要么增加key_buffer_size，要么就是过渡索引了，把缓存占满了。比较理想的设置：
Key_blocks_used / (Key_blocks_unused + Key_blocks_used) * 100% ≈ 80%
四、临时表
mysql> show global status like ‘created_tmp%‘;
+-------------------------+---------+
| Variable_name　　　　　　　　　　　 | Value　　　 |
+-------------------------+---------+
| Created_tmp_disk_tables | 21197　　　 |
| Created_tmp_files　　　　　　　 | 58　　　　　　 |
| Created_tmp_tables　　　　　　 | 1771587 |
+-------------------------+---------+
每次创建临时表，Created_tmp_tables增加，如果是在磁盘上创建临时表，Created_tmp_disk_tables也增加,Created_tmp_files表示MySQL服务创建的临时文件文件数，比较理想的配置是：
　　Created_tmp_disk_tables / Created_tmp_tables * 100% <= 25%比如上面的服务器Created_tmp_disk_tables / Created_tmp_tables * 100% ＝ 1.20%，应该相当好了。我们再看一下MySQL服务器对临时表的配置：
mysql> show variables where Variable_name in (‘tmp_table_size‘, ‘max_heap_table_size‘);
+---------------------+-----------+
| Variable_name　　　　　　　 | Value　　　　　 |
+---------------------+-----------+
| max_heap_table_size | 268435456 |
| tmp_table_size　　　　　　 | 536870912 |
+---------------------+-----------+
只有256MB以下的临时表才能全部放内存，超过的就会用到硬盘临时表。
五、Open Table情况
mysql> show global status like ‘open%tables%‘;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Open_tables　　　 | 919　　　 |
| Opened_tables | 1951　 |
+---------------+-------+
Open_tables表示打开表的数量，Opened_tables表示打开过的表数量，如果Opened_tables数量过大，说明配置中table_cache(5.1.3之后这个值叫做table_open_cache)值可能太小，我们查询一下服务器table_cache值：
mysql> show variables like ‘table_cache‘;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| table_cache　　　 | 2048　 |
+---------------+-------+
比较合适的值为：
Open_tables / Opened_tables * 100% >= 85%
Open_tables / table_cache * 100% <= 95%
六、进程使用情况
mysql> show global status like ‘Thread%‘;
+-------------------+-------+
| Variable_name　　　　　 | Value |
+-------------------+-------+
| Threads_cached　　　　 | 46　　　　 |
| Threads_connected | 2　　　　　 |
| Threads_created　　　 | 570　　　 |
| Threads_running　　　 | 1　　　　　 |
+-------------------+-------+
如果我们在MySQL服务器配置文件中设置了thread_cache_size，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁（前提是缓存数未达上限）。Threads_created表示创建过的线程数，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器thread_cache_size配置：
mysql> show variables like ‘thread_cache_size‘;
+-------------------+-------+
| Variable_name　　　　　 | Value |
+-------------------+-------+
| thread_cache_size | 64　　　　 |
+-------------------+-------+
示例中的服务器还是挺健康的。
七、查询缓存(query cache)
mysql> show global status like ‘qcache%‘;
+-------------------------+-----------+
| Variable_name　　　　　　　　　　　 | Value　　　　　 |
+-------------------------+-----------+
| Qcache_free_blocks　　　　　　 | 22756　　　　　 |
| Qcache_free_memory　　　　　　 | 76764704　 |
| Qcache_hits　　　　　　　　　　　　　 | 213028692 |
| Qcache_inserts　　　　　　　　　　 | 208894227 |
| Qcache_lowmem_prunes　　　　 | 4010916　　　 |
| Qcache_not_cached　　　　　　　 | 13385031　 |
| Qcache_queries_in_cache | 43560　　　　　 |
| Qcache_total_blocks　　　　　 | 111212　　　　 |
+-------------------------+-----------+
MySQL查询缓存变量解释：
Qcache_free_blocks：缓存中相邻内存块的个数。数目大说明可能有碎片。FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。
Qcache_free_memory：缓存中的空闲内存。
Qcache_hits：每次查询在缓存中命中时就增大
Qcache_inserts：每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。
Qcache_lowmem_prunes：缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看；如果这个数字在不断增长，就表示可能碎片非常严重，或者内存很少。（上面的 free_blocks和free_memory可以告诉您属于哪种情况）
Qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了now()之类的函数。
Qcache_queries_in_cache：当前缓存的查询（和响应）的数量。
Qcache_total_blocks：缓存中块的数量。
我们再查询一下服务器关于query_cache的配置：
mysql> show variables like ‘query_cache%‘;
+------------------------------+-----------+
| Variable_name　　　　　　　　　　　　　　　　 | Value　　　　　 |
+------------------------------+-----------+
| query_cache_limit　　　　　　　　　　　　 | 2097152　　　 |
| query_cache_min_res_unit　　　　　 | 4096　　　　　　 |
| query_cache_size　　　　　　　　　　　　　 | 203423744 |
| query_cache_type　　　　　　　　　　　　　 | ON　　　　　　　　 |
| query_cache_wlock_invalidate | OFF　　　　　　　 |
+------------------------------+-----------+
各字段的解释：
query_cache_limit：超过此大小的查询将不缓存
query_cache_min_res_unit：缓存块的最小大小
query_cache_size：查询缓存大小
query_cache_type：缓存类型，决定缓存什么样的查询，示例中表示不缓存 select sql_no_cache 查询
query_cache_wlock_invalidate：当有其他客户端正在对MyISAM表进行写操作时，如果查询在query cache中，是否返回cache结果还是等写操作完成再读表获取结果。
query_cache_min_res_unit的配置是一柄”双刃剑”，默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费。
查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%
如果查询缓存碎片率超过20%，可以用FLUSH QUERY CACHE整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。
查询缓存利用率 = (query_cache_size - Qcache_free_memory) / query_cache_size * 100%
查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小；查询缓存利用率在80％以上而且Qcache_lowmem_prunes > 50的话说明query_cache_size可能有点小，要不就是碎片太多。
查询缓存命中率 = (Qcache_hits - Qcache_inserts) / Qcache_hits * 100%
示例服务器 查询缓存碎片率 ＝ 20.46％，查询缓存利用率 ＝ 62.26％，查询缓存命中率 ＝ 1.94％，命中率很差，可能写操作比较频繁吧，而且可能有些碎片。
八、排序使用情况
mysql> show global status like ‘sort%‘;
+-------------------+------------+
| Variable_name　　　　　 | Value　　　　　　 |
+-------------------+------------+
| Sort_merge_passes | 29　　　　　　　　　 |
| Sort_range　　　　　　　　 | 37432840　　　 |
| Sort_rows　　　　　　　　　 | 9178691532 |
| Sort_scan　　　　　　　　　 | 1860569　　　　 |
+-------------------+------------+
Sort_merge_passes 包括两步。MySQL 首先会尝试在内存中做排序，使用的内存大小由系统变量 Sort_buffer_size 决定，如果它的大小不够把所有的记录都读到内存中，MySQL 就会把每次在内存中排序的结果存到临时文件中，等 MySQL 找到所有记录之后，再把临时文件中的记录做一次排序。这再次排序就会增加 Sort_merge_passes。实际上，MySQL 会用另一个临时文件来存再次排序的结果，所以通常会看到 Sort_merge_passes 增加的数值是建临时文件数的两倍。因为用到了临时文件，所以速度可能会比较慢，增加 Sort_buffer_size 会减少 Sort_merge_passes 和 创建临时文件的次数。但盲目的增加 Sort_buffer_size 并不一定能提高速度，见 How fast can you sort data with MySQL?（另外，增加read_rnd_buffer_size(3.2.3是record_rnd_buffer_size)的值对排序的操作也有一点的好处九、文件打开数(open_files)
mysql> show global status like ‘open_files‘;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Open_files　　　　 | 1410　 |
+---------------+-------+
mysql> show variables like ‘open_files_limit‘;
+------------------+-------+
| Variable_name　　　　 | Value |
+------------------+-------+
| open_files_limit | 4590　 |
+------------------+-------+
比较合适的设置：Open_files / open_files_limit * 100% <= 75％
十、表锁情况
mysql> show global status like ‘table_locks%‘;
+-----------------------+-----------+
| Variable_name　　　　　　　　　 | Value　　　　　 |
+-----------------------+-----------+
| Table_locks_immediate | 490206328 |
| Table_locks_waited　　　　 | 2084912　　　 |
+-----------------------+-----------+
　　Table_locks_immediate表示立即释放表锁数，Table_locks_waited表示需要等待的表锁数，如果Table_locks_immediate / Table_locks_waited > 5000，最好采用InnoDB引擎，因为InnoDB是行锁而MyISAM是表锁，对于高并发写入的应用InnoDB效果会好些。示例中的服务器Table_locks_immediate / Table_locks_waited ＝ 235，MyISAM就足够了。
十一、表扫描情况
mysql> show global status like ‘handler_read%‘;
+-----------------------+-------------+
| Variable_name　　　　　　　　　 | Value　　　　　　　 |
+-----------------------+-------------+
| Handler_read_first　　　　 | 5803750　　　　　 |
| Handler_read_key　　　　　　 | 6049319850　 |
| Handler_read_next　　　　　 | 94440908210 |
| Handler_read_prev　　　　　 | 34822001724 |
| Handler_read_rnd　　　　　　 | 405482605　　　 |
| Handler_read_rnd_next | 18912877839 |
+-----------------------+-------------+
调出服务器完成的查询请求次数：
mysql> show global status like ‘com_select‘;
+---------------+-----------+
| Variable_name | Value　　　　　 |
+---------------+-----------+
| Com_select　　　　 | 222693559 |
+---------------+-----------+
计算表扫描率：
表扫描率 ＝ Handler_read_rnd_next / Com_select
如果表扫描率超过4000，说明进行了太多表扫描，很有可能索引没有建好，增加read_buffer_size值会有一些好处，但最好不要超过8MB
