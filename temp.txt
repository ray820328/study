http://outofmemory.cn/code-snippet/80/16-ibatis-changyong-SQL-statement-code

http://zhuyuehua.iteye.com/blog/1721715

魏晋南北朝隋唐关系图
http://bbs.tianya.cn/post-no05-505583-1.shtml

vs2015密钥，亲测没问题，在此分享给各位：
专业版：HMGNV-WCYXV-X7G9W-YCX63-B98R2
企业版：HM6NR-QXX7C-DFW2Y-8B82K-WTYJV
          
------------------------------------
网络流量对外对内实时
iftop

cat log.*|grep error _A x > file
-B x

------------------------------------
release版本管理
Jenkins

项目管理，bug追踪
Redmine

------------------------------------
process.nextTick 是将异步回调放到当前帧的末尾、io回调之前，如果nextTick过多，会导致io回调不断延后,
最后callback堆积太多.setImmediate 是将异步回调放到下一帧,不影响io回调,不会造成callback 堆积.

<<深入浅出nodeJS>>读书笔记--<二>
http://www.cnblogs.com/veeking/p/3965454.html
Node的异步I/O:
-事件循环-观察者-请求对象-执行回调
非I/O的异步回调API:
1、定时器 setTimeout
2、process.nextTick()
3、setImediate()
setImediate 与 process.nextTick()的异同点:
   相同点： 用法 和 功能几乎都一样
   不同点： 1、process.nextTick()的优先级要高些，原因是 事件循环对观察者的检查是有先后顺序的。
 　　　     　　2、具体实现上，process.nextTick()的回调函数保存在一个数组中，setImmediate()的结果是保存在链表中的。
            3、在行为上，process.nextTick()在每轮循环中会将数组中的回调函数全部执行完，
            而setImmediate()在每轮循环中执行链表的第一个回调函数.
               
------------------------------------
避免uncaughtException错误引起node.js进程崩溃 + nodejs domain
http://yijiebuyi.com/blog/cacbcf0838469a377054f6fab5836252.html
http://yijiebuyi.com/blog/6172e8bc535a75469beaf4cf85e9435f.html

pomelo改进启动选项,打印日志
https://github.com/NetEase/pomelo/blob/master/lib/master/starter.js#L179

------------------------------------
##Pomelo实现的一些细节
  ---
  
  1.	在handler中的方法一定要调用回调函数，不然rpc请求会失败。
  +	在remote中的方法一定要调用回调函数，并且第一个参数是err，没有错误时给null就行，有错误时new一个Error。
  +	不需要回调函数的时候可以传一个null，但是在实现中还是要调用。
  +	在handler返回数据给前端的时候，JSON数据项数超过三有可能迷之崩溃，解决方案是把数据多封装一层。
  +	handler传输的参数很有限，在前端调用时最好只传一个数据参数，后端接受的时候会有三个参数，依次是data，session，next
  +	在路由等时候，session和msg中存的是字符串，虽然打印出来和JSON一模一样，JSON.parse。
  +	gate服务器和connector服务器不同，在前端重新init给connector服务器之后，gate服务器就不能再收到来自前端的请求了，
  因为这时候所有的消息都直接发送给connector，并且admin－server也不会帮忙路由消息给gate服务器
  +	修改服务器信息只要修改config下面的server.json即可，添加服务器需要到config下面的adminServer.json添加token。

------------------------------------
如何用 svn 管理 unity3d 项目
CSDN | 2012-11-19 15:16
因为svn用惯了， asset server还是收费的，所以这个版本还是使用svn来管理unity3d的工程，
刚开始的时候各种问题，丢失场景啊，丢失纹理贴图等等。
被折腾了好久，我终于抽时间去官网上看了下，并且按照官网设置，用了几个月，感觉很稳定，所以存档记录，并分享给大家。
1、在Uniyt里面， Edit->project settings->editor 里面选择metafile(Visible Meta Files)
2、提交的时候仅提交Assets 和 ProjectSettings 两个目录下所有东西，忽略掉其他所有目录和文件
3、提交的时候.metafile也要提交
4、修改了prefab或者场景，一定记得要File -> Save Scene再提交，否则会丢东西

unity项目内存+性能分析
http://blog.csdn.net/awnuxcvbn/article/details/44617207

------------------------------------
典型内存泄露
var express = require('express');

function external(cb) {
    process.nextTick(function () {
        throw new Error();
        cb.call(null, 'sunny');
    })
}

var app = express();
app.get('/weather', function (req, res) {
    external(function (data) {
        res.end('Weather of Beijing is ' + data);
    })
})
app.listen(8018);

function noop(){}
process.on('uncaughtException', noop)


------------------------------------
javascrpt == === 比较
http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3

'' == '0'           // false
0 == ''             // true
0 == '0'            // true

false == 'false'    // false
false == '0'        // true

false == undefined  // false
false == null       // false
null == undefined   // true

' \t\r\n ' == 0     // true
The lack of transitivity is alarming. My advice is to never use the evil twins. Instead, always use === and !==. 
All of the comparisons just shown produce false with the === operator.
Update:

A good point was brought up by @Casebash in the comments and in @Phillipe Laybaert's answer concerning reference types. 
For reference types == and === act consistently with one another (except in a special case).

var a = [1,2,3];
var b = [1,2,3];

var c = { x: 1, y: 2 };
var d = { x: 1, y: 2 };

var e = "text";
var f = "te" + "xt";

a == b            // false
a === b           // false

c == d            // false
c === d           // false

e == f            // true
e === f           // true
The special case is when you compare a literal with an object that evaluates to the same literal, 
due to its toString or valueOf method. For example, 
consider the comparison of a string literal with a string object created by the String constructor.

"abc" == new String("abc")    // true
"abc" === new String("abc")   // false
Here the == operator is checking the values of the two objects and returning true, 
but the === is seeing that they're not the same type and returning false. 
Which one is correct? That really depends on what you're trying to compare. 
My advice is to bypass the question entirely and just don't use the String constructor to create string objects.




0755-88351991
8817





