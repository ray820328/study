策划，配表
通用奖励格式
操作类型|道具id|最小数量|最大数量（0固定最小）|绑定（0非绑1绑）|随机取范围（0必中)|随机取模（0取默认100）_
操作类型：0为按道具id掉落，1为按玩家职业掉落道具id对应星级的道具，2为随机掉落任意职业对应星级的道具，3为道具id指定的其他属性如经验等

审核（美术外包等）
需求审核/结果审查，审核层级，从低级到低级或者从低级到高级，
一定要跟最终需要的人员审核，杜绝拍板；

游戏开发工作计划
立项，确定执行型计划，非框架型计划

开发模式
项目选型一，保守型
程序擅长做什么类型（卡牌，消除，跑酷，a/rpg，mmo），
策划擅长的方案
美术擅长的风格
项目选型二，创新型
发行介入，多维度分析，用户，市场，技术，确定类型，玩法，美术风格等；

项目开发，三天开发原型
第一个月开发和迭代核心功能，
第二个月设计图像风格和制作核心美术资源，程序设计拓展性，压力，代码效率等，
接下来尽可能在两个月之内完成所有功能。
发售后再根据市场反馈进行更新版本的迭代修改。

开发盈利
1，开发前从表现，差异化，核心玩法上策划盈利点，
上线后验证，分析哪些点没有达到预期，为什么，
短期上分析玩家的消费行为，针对性吸引玩家充值；


2，自由模式，只考虑玩法、表现，从玩法和表现上吸引玩家，不考虑消费行为，
只考虑人性化留住玩家，培养忠实玩家，从而达到盈利；

关键点：
项目前期探讨，确认核心玩法，世界观，最好是全员，
关键人员共识后敲定具体方案，逐步详细列出细节，每个人都清楚细节后再开发，
世界观玩法形式，核心玩法数值策划，公式曲线，拉出各种图表，等级，技能曲线等，
付费点设计，何种价格获得何种效果，为何是这个价格等分析设计，
美术确认理解世界观，如何表现风格，更细节考虑图片加载，个数，重用组合等；

导引建议：
非简单操作一定要有导引，
明显按钮可以打开导引，蒙版可以随时关闭，导引有面板菜单；

培养成员对游戏的爱好，热爱才有动力和热情去实现；
控制好开发节奏，时间是热情的杀手；

付费后置：
mmo
付费前置：
卡牌

音效：
大气
indra

------------------------------------------------------------------------------------
程序设计经验
LoginServer建议保存至少玩家角色ID；
GameServer一定保存AccountKey；


 使用行为树(Behavior Tree)实现游戏AI
http://blog.csdn.net/kenkao/article/details/6099966
十字链表的AOI算法
http://www.codedump.info/?p=388
微信、陌陌等著名IM软件设计架构详解
http://mp.weixin.qq.com/s?__biz=MzAwNjQwNzU2NQ==&mid=400318386&idx=1&sn=3c80b178e10e7b0219966d76c488959d&scene=23&srcid=1106ER0pevwThDlCpEqsXnmW&ptlang=2052&ADUIN=54374571&ADSESSION=1447034441&ADTAG=CLIENT.QQ.5407_.0&ADPUBNO=26471#rd
《梦幻西游》手游服务器如何实现200万玩家同时在线？(技术篇)
http://mt.sohu.com/20150628/n415768524.shtml?qq-pf-to=pcqq.group
lua下使用protobuf
http://ziplee.iteye.com/blog/2078851
https://github.com/sean-lin/protoc-gen-lua
protoc-gen-lua
L#热更新  A Pure C# IL Runner,Run DLL as a Script.直接解析执行IL的脚本引擎
https://github.com/lightszero/LSharp
UNITY 2D入门基础教程
http://blog.1vr.cn/?p=1422


------------------------------------------------------------------------------------
数据分析部分。
百度指数（移动/PC）。
月度，周，日
AppAnnie（下载/畅销）
月度，周，日
成本分析（自己推算）
日，周，月
一般发行看产品数据（媒体指数/下载指数/畅销指数/成本分析），
百度指数：付费帐号看的更多更细。
http://index.baidu.com/
App Annie：APP托管可以看渠道详细数据，付费帐号可以看竞品数据分析。
https://www.appannie.com/cn/
友盟：我这有个APP的帐号，可以看详细数据。他们的后台页面就做得很好。
http://www.umeng.com/apps

https://www.talkingdata.com
dataeye

-----------------------------------优化，代码和用户游戏/非游戏体验--------------------------------------
数据结构优化
使用CLion或者visual studio导出类中定义的所有成员变量，
然后gdb使用命令： 
p ((unsigned long)(&((ClassName*)0)->MemberName))，
打印出类 ClassName的成员变量MemberName相对类基地址的偏移，
根据偏移从小到大排序后，变量的顺序即为定义的顺序，根据偏移相减即可得出每个成员变量大小，然后优化占用内存大的成员变量

创建文件异常/写入文件异常
解决方案： 
此情况可能是存储卡IO异常，一般先进行判断writeleft>0 和进行fwrite 几次重试即可恢复。
少部分用户可能是手机内存卡有写保护，提醒用户进行设置(一般安卓系统里没有，需要在PC里面设置或者root用户通过系统软件设置)。 

整包或部分文件被劫持或者Cache
此问题移动网络下比较常见，劫持或 Cache 导致的失败率占一半以上，当地运营商(各省策略不一样)由于各种原因，将某些下载文件劫持，导致下载失败。 
解决方案： 
提供备份 BGP 下载地址，由于 CDN 边缘节点较多，整个 CDN 节点都进行备份，资源浪费比较严重，
而失败用户占比较小，所以采取集中的BGP IP下载备份源，当CDN下载失败时，直接连接BGP IP的nginx代理重试下载。

移动网络下，数据文件被运营商网关截断
解决方案： 
少部分运营商WAP网关会对单数据包大于10M的请求进行截断导致下载失败， 解决方法是采用分片下载的方式，当一个下载资源包大于10M时，将资源包分成数个小于10M的资源包进行下载，本地再进行组合。 

跨网下载很慢或者失败，由于下载过程中网络发生切换(移动网络切换WiFi或 者WiFi切换另一个运营商WiFi)导致。 
解决方案： 
及时判断网络的制式以及和后台通讯看用户的 IP 是否发生变化，如发生变化， 重新解析CDN域名获取与用户IP所属运营商一致的CDN资源，并支持断点重连技术。 
CDN问题主要原因是和各个CDN厂商相关，比如有些CDN厂商的CDN池分两 种： 
小资源 CDN 池：整体带宽相对小，支持频繁更新(回源频率快)，边缘节点多， 离用户近，下载更快。 
大资源 CDN 池：整体带宽大，不支持频繁更新(大资源对回源服务器压力大)，
边缘节点少，主要集中在大城市，下载相对较慢。 
这里就要注意： 
1.大的整包资源尽量不要放在小资源 CDN 池，假如该 CDN 每十分钟清理文件 并到回源服务器去拉取最新文件，会导致每十分钟你的整包资源会被删掉，并且 在回源完成的过程中无法下载成功。 
2.图片、配置文件、公告等小资源可放在小资源 CDN 池，这样配置文件，公告 等经常更新的资源更新后会更快速及时的被用户下载到。 
3.一般 CDN 边缘节点会有 LRU（Least Recently Used）近期最少使用算法， 如果你的资源老被淘汰到磁盘上而非内存中，必然导致下载速度相对较慢，如果 CDN 边缘节点负载过高，也会导致下载较慢或者失败，这些需要找 CDN 厂商 帮你定位解决。 
适当增量更新的方案可以减少文件大小和下载时长。 
 
DNS解析： 
DNS 解析是登录的第一步，也是使用域名业务最常遇到的问题，
移动网络特有的几个DNS的问题： 
1.移动网络LocalDNS劫持 DNS 劫持是大家遇到最多的问题，移动运营商由于算法、调度和网间流量等种 种原因，将域名的IP 解析成自己网内的一个IP或者一个错误IP，导致玩家无法 登录服务器，突发的时候 DNS 劫持率可以达到 2%以上。
2.移动网络DNS解析IP非本运营商IP 
原因一： 部分运营商骨干网带宽较小，访问LocalDNS 得到的是本运营商的接入点 IP(因为我们做了分运营商接入)，
但是用户访问的时候，运营商判断出口带宽不够，就把流量调度到租用的第三方出口，也就是说获取DNS的网络路径和流量的网络路径不一致，我们最终看到用户的出口 IP 是第三方的 IP，这样就会导致用户出现跨网访问。 
原因二(非常少量)： 运营商为了防止DNS服务器故障，做了第三方DNS服务器备份，当LocalDNS 故障时，用户访问到第三方DNS服务器得到其他运营商的接入点IP，导致跨网访问。 

移动4G网络DNS解析很慢 
4G网络发现有些游戏登陆非常慢，而实际上他的网络质量还是很好的，玩的过程中即便延时也很快
移动 4G 用户 DNS 先去查询 4A 地址(IPV6 地址)，大部分业务现在都没有配置 4A地址，所以正常的应该返回 4A地址为空，然后就会去查询 A 地址，获得正常的IPV4地址。
部分安卓系统就会出现问题，系统认为查询错误不是没有 IPV6 地址， 而是系统错误，就会不停地重试去访问 4A 地址，甚至重试几分钟后才去获取 IPV4地址，导致业务卡在DNS获取地方，登陆游戏很慢
查询 4A 地址 (IPV6)，不仅仅和网络制式有关系，和手机型号或定制系统也有关系
解决方案： 
主要采用httpdns+LDNS结合的方式
技术原理：
A、SDK 通过高效的 BGP 线路直接访问 HTTPDNS 后台，获取域名的最优 IP， 客户端获取到业务IP 后，就直接往此IP发送业务协议请求。 
B、基于容灾考虑，保留使用运营商 LocalDNS 解析域名的方式作为备份线路。(因为我们发现，有些BGP IP也会被极少数运营商劫持) 
通过搭建我们自己的 HTTPDNS 服务和 LDNS 双备份服务，优先取HTTPDNS，而不是LDNS，跨运营商和4A的问题也相应得到解决。 

网络连接
网络连接主要有以下几个问题： 
1.运营商之间出口带宽小，网络不稳定，如业务部署的服务器和用户不在一个运 营商，会导致连接超时或丢包严重。 
解决方案一般有2种： 
1）分运营商接入：
2）使用BGP IP： 边界网关协议(BGP)是运行于 TCP 上的一种自治系统的路由协议。 BGP 是唯一一个用来处理像因特网大小的网络协议，也是唯一能够妥善处理好不相关路由域间的多路连接的协议。 
BGP实现单一IP覆盖所有运营商用户的效果，利于运营资源利用率的提升，并能彻底解决用户跨网穿越的问题。 对于解决中国这么复杂的运营商网络，BGP是一个不错的解决方案，但BGP资源一般都比较贵。 
2.手游用户经常在国外访问我们的服务器。 
手游用户由于出国游玩或者居住国外，经常会从国外连入我们国内的服务器，由于中国对国际出口的管制，导致网络质量会非常差。 
有能力的公司可以增加国外接入点(建议在香港)，然后调度国外用户接入国外接入点，再通过vpn或者专线接入国内服务器(这个vpn或者专线也会受到国家监管)，提高国外用户访问质量

Crash问题
Android： 
Java层异常的捕获，一般是在启动时设置异常回调： void java.lang.Thread.setDefaultUncaughtExceptionHandler(UncaughtEx ceptionHandler handler) 
一旦发生异常会调用到 handler 进行处理，handler 参数中带有 Thread 和 Throwable，
可以通过这两个变量来获取线程堆栈和异常堆栈。  public static interface UncaughtExceptionHandler { void uncaughtExcept ion(Thread thread, Throwable ex); }  
C++(native)开发的如Unity
一般native的收集方法： 启动时注册信号处理 int sigaction(int signum, const struct sigaction *act,struct sigaction *olda ct);  
把堆栈放在一个特定的内存中，一旦发生崩溃会调用到信号处理函数，fork出一个子进程去获取
iOS： 
一般可以通过 signal 方法注册信号处理，signal(int signum, void (*shandler) (int)); 
系统调用 AppDelegate 的 didFinishLaunchingWithOption 方法处理，捕获 SIGABRT，SIGILL，SIGSEGV等信号，当发生Crash的时候通过backtrace和 backtrace_symbols这两个方法追溯到出错堆栈
unity中就典型例子
游戏Crash的堆栈信息是发生在nativeDone,，nativeDone以上 是native C++代码，通过反编译的追查，我们最终发现Application.Quit来调用的 nativeDone，
解决拌饭改写 Application.Quit 函数，只要调用 Application.Quit函数，调用System.Diagnostics.Process.GetCurrent- Process().Kill()
一款手游要想 Crash 原因不造成用户流失，个人觉得 Crash 率应该控制在 3% 以下

FPS卡顿
针对 FPS 较低的用户，通过大数据分析出一个“机能库”，把相应手机机型的推荐配置发送给用户，例如小米note手机关掉语音，音效，降低画质，每秒帧数，FPS分别可以提高多少等，帮助玩家尽可能的提高游戏的体验

延时
延时的采集方法：每 3~5 秒对游戏服务器进行一次延时测速，可以采用心跳包的模式，建议采用和游戏同样的协议
2G情况下，80%以上的延时是在运营商核心网部分；3G大概60%的延时是在运营商接入网部分，4G大概只有40%左右的延时在核心网部分(取决于游戏服务器的部署)
解决办法
运营商接入网部分： 
3G：3GPP 协议里面 PDP 和 DSCP 都具有 QOS 保障字段，可以进行无线核心 网的网络质量保障
4G：LTE网络定义了 QCI可以对数据包进行管理和保障（其中还定义了QCI等于3就是用于实时游戏）
