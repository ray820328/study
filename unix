虚拟化机器查看工具
wget http://soft.kwx.gd/tools/virt-what-1.11.tar.gz
yum install lrzsz
版本信息
lsb_release -a
cat /proc/version
centos cat /etc/redhat-release
uname -n --- whereis mysql --- find / -name my*
挂载硬盘
fdisk -l
fdisk /dev/vdb
n->p->1->回车->回车【意思就是新建一个主分区，大小是整个sdd磁盘】
最后执行w，写入磁盘
mkfs.ext4 /dev/vdb
mkdir /disk1
mount /dev/vdb /disk1
开机自动挂载
vi /etc/fstab
/dev/vdb  /data ext4  defaults 0 0

du -h --max-depth=1
du -h --max-depth=1 work/testing
du -h --max-depth=1 work/testing/×

find /tmp -mtime +3 -type f -name *.sh[ab] -exec rm -f {} \;
/tmp  --设置查找的目录；
-mtime +30 --设置时间为30天前；
-type f --设置查找的类型为文件；
-name *.sh[ab] --设置文件名称中包含sha或者shb；
-exec rm -f --查找完毕后执行删除操作；
find /data/bigdata/zookeeper-3.4.6/data/version-2 -mtime +3 -type f -name *.* -exec rm -f {} \;
find . -mtime +3 -type f | xargs rm -rf

磁盘大小
df -h
取消挂载 umount /dev/vdb /disk1
文件夹大小
du -h --max-depth=1

centos修改主机名命令
/etc/sysconfig/network
/etc/hosts

zip -r wwwroot.zip wwwroot
unzip wwwroot.zip -d wwwroot
防火墙
service iptables stop
iptables -V
/etc/init.d/iptables status
vi /etc/sysconfig/iptables 
-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
永久性关闭防火墙 
chkconfig --level 35 iptables off /etc/init.d/iptables stop iptables

chkconfig iptables --list
chkconfig iptables off

netstat -nltp

单个IP的命令是
iptables -I INPUT -s 59.151.119.180 -j DROP
封IP段的命令是
iptables -I INPUT -s 211.1.0.0/16 -j DROP
iptables -I INPUT -s 211.2.0.0/16 -j DROP
封整个段的命令是
iptables -I INPUT -s 211.0.0.0/8 -j DROP
封几个段的命令是
iptables -I INPUT -s 61.37.80.0/24 -j DROP
iptables -I INPUT -s 61.37.81.0/24 -j DROP
白名单
-A INPUT -s 10.104.0.0/16 -j ACCEPT

为了不重启服务器而使配置立即生效，可以执行
　　#sysctl -w net.ipv4.tcp_max_syn_backlog=2048
　　#sysctl -w net.ipv4.tcp_syncookies=1
　　#sysctl -w net.ipv4.tcp_synack_retries=3
　　#sysctl -w net.ipv4.tcp_syn_retries=3
　　也有的人喜欢用访问控制列表来防止SYN的攻击，在一定程度上减缓了syn的攻击，防Syn 洪水攻击
　　-A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT
　　--limit 1/s 限制syn并发数每秒1次
　　防端口扫描
　　-A FORWARD -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s -j ACCEPT
　　死亡之ping
　　-A FORWARD -p icmp --icmp-type echo-request -m limit --limit 1/s -j ACCEPT

时区确认，时间
date
字符编码
/etc/sysconfig/i18n
原来的配置：
LANG="C"
SYSFONT="latarcyrheb-sun16"
现在的配置：LANG="zh_CN.UTF-8"
SYSFONT="latarcyrheb-sun16"
source /etc/sysconfig/i18n

export LC_ALL=zh_CN.en_US.UTF-8 
source /etc/profile

yum Cannot find a valid baseurl for repo: base
To fix this error I updated NM_CONTROLLED to “no” in the file /etc/sysconfig/network-scripts/ifcfg-eth0
ifdown eth0
ifup eth0

安装netstat模块
yum provides */netstat
yum install net-tools

查看端口被占用的详细信息
netstat -lnput | grep 80
#ps -aux | grep 17599

系统设置，如打开文件数
ulimit -a
open files 打开的文件句柄数
max user processes 用户最大运行进程数
/etc/security/limits.conf添加以下值
*               hard    nofile          500000
*               soft    nofile          500000
*               hard    nproc           16384
*               soft    nproc           20480

/etc/security/limits.d/90-nproc.conf
*         soft    nproc    65535

对于服务器可以采用如下方法修改file-max:
（1）重启机器后恢复为默认值
echo 100000 > /proc/sys/fs/file-max
或者
sysctl -w "fs.file-max=100000"
（2）修改配置文件/etc/sysctl.conf, 在最后加上一行：
fs.file-max = 100000
然后重启机器后生效。以后永久生效。

打开的连接数fd
netstat -ano|grep 80|grep -V EST|wc -l
netstat -ano|grep 80|grep -V EST|less

建立软连接
ln -s file1 file1soft
rm -rf file1soft

端口服务状态查看
netstat – ano

编辑网卡配置文件，命令： vim /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
HWADDR=44:8A:5B:7D:2F:4A
TYPE=Ethernet
UUID=2ba3d053-88f3-41b3-a3ea-66c5c8e7f248
ONBOOT=yes
NM_CONTROLLED=no
#BOOTPROTO=dhcp
IPADDR=10.10.84.16
NETMASK=255.255.255.0
GATEWAY=10.10.84.254
DNS1=202.96.128.86
DNS2=210.21.196.6

重启网络连接，命令： service network restart

------------------------------ssh免密码登录---------------------------------
先确保所有主机的防火墙处于关闭状态。
----------------
如果没有ssh，先安装，
which ssh
#rpm -qa |grep ssh 检查是否装了SSH包
没有的话yum install openssh-server和yum install openssh-clients
#chkconfig --list sshd 检查SSHD是否在本运行级别下设置为开机启动
#chkconfig --level 2345 sshd on如果没设置启动就设置下.
#service sshd restart重新启动
#netstat -antp |grep sshd看是否启动了22端口.确认下.
#iptables -nL看看是否放行了22口.
禁止root登录
vi /etc/ssh/sshd_config
#PermitRootLogin no
去掉该行前面的#号，使其成为下面这样：
PermitRootLogin no
重启ssh服务，切换到root修改密码：
passwd
----------------
在主机A上执行如下：
　1.　$cd ~/.ssh
　2.　$ssh-keygen -t rsa  --------------------然后一直按回车键，就会按照默认的选项将生成的密钥保存在.ssh/id_rsa文件中。
　3.　$cp id_rsa.pub authorized_keys 
         这步完成后，正常情况下就可以无密码登录本机了，即ssh localhost，无需输入密码。
　4.　$scp authorized_keys summer@10.0.5.198:/home/summer/.ssh   ------把刚刚产生的authorized_keys文件拷一份到主机B上.　　
　5.　$chmod 600 authorized_keys       
　　   进入主机B的.ssh目录，改变authorized_keys文件的许可权限。
　　 (4和5可以合成一步，执行:  $ssh-copy-id -i root@192.168.201.102)
　　 ssh-copy-id -i '-p 2009 root@ip'
默认用法：
ssh-copy-id user@server  
自定义用法：
ssh-copy-id -i 公钥文件路径 user@server
ssh-copy-id -p 服务器SSH服务端口 user@server

scp -P 2009 -rp apache-storm-0.9.3/ root@hadoop.vm02:/data/env/

ssh -p 2009 -l root 10.10.x.x

root ssh
setenforce 0
/etc/selinux/config文件中设置SELINUX=disabled ，然后重启服务器

vi /etc/ssh/sshd_config
PermitRootLogin no 改成yes
修改两处的值为：  
ClientAliveInterval 60  
ClientAliveCountMax 10 
#service sshd reload/restart

ssh-copy-id -i '-p 2009 root@ip'

------------------------------Yum(未成功)---------------------------------
CentOS下重新安装yum (2013-02-17 22:14:55)转载▼
标签： linux centos 安装yum yum	分类： Linux
1，下载最新的yum-3.2.28.tar.gz并解压
#wget http://yum.baseurl.org/download/3.2/yum-3.2.28.tar.gz
#tar xvf yum-3.2.28.tar.gz
2，进入目录，运行安装
#cd yum-3.2.28
#./yummain.py install yum
如果提示错误： CRITICAL:yum.cli:Config Error: Error accessing file for config file:///etc/
是缺少配置文件。在etc目录下面新建yum.conf文件，然后再次运行 yummain.py install yum，顺利完成安装。
3，最后更新系统
#yum check-update
#yum update
#yum clean all

---------------------------------Python2.7------------------------------
centos6安装python2.7
tar zxvf Python-2.7.9.tgz
./configure
make
make install

mv /usr/bin/python /usr/bin/python2.6
千万不要做，否则yum以及其他一些依赖python的环境会失效
ln -s /usr/local/bin/python2.7 /usr/bin/python2.6
/usr/bin/python -V

---------------------------------JDK------------------------------
rpm -qa | grep jdk
jdk-1.6.0_45-fcs.x86_64
rpm -qa | grep gcj
libgcj-4.4.7-4.el6.x86_64
java-1.5.0-gcj-1.5.0.0-29.1.el6.x86_64

rpm -e --nodeps jdk-1.6.0_45-fcs.x86_64
rpm -e --nodeps libgcj-4.4.7-4.el6.x86_64
rpm -e --nodeps java-1.5.0-gcj-1.5.0.0-29.1.el6.x86_64

rpm -ivh --replacepkgs jdk-7u79-linux-x64.rpm
# chmod +x jre-7u79-linux-x64-rpm.bin （对 .bin 文件加上可执行权限）
# ./jre-7u79-linux-x64-rpm.bin

设置环境变量
在/etc/profile文件末尾处追加下面信息：
export JAVA_HOME=/usr/java/jdk1.7.0_79
export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin
刷新环境变量（执行下面命令）
# source /etc/profile


tomcat
JAVA_OPTS="-server -Xms1024m -Xmx2048m -XX:PermSize=64m -XX:MaxPermSize=256m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/product/tomcat/"

-----------------------------文件输出命令----------------------------

“>/dev/null 2>&1”  拆为四部分来分析下:
1：> 代表重定向到哪里，例如：echo "123" > /home/123.txt
2：首先 0> 表示stdin标准输入; 1> 表示stdout标准输出; 2> 表示stderr错误输出; 
3：/dev/null 代表空设备文件
4：& 可以理解为是"等同于"的意思，2>&1，即表示2的输出重定向等同于1
5：1 表示stdout标准输出，系统默认值是1，所以">/dev/null"等同于 "1>/dev/null"
因此，>/dev/null 2>&1 也可以写成“1> /dev/null 2> &1”
那么'>/dev/null 2>&1'执行过程为：
1>/dev/null ：首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，说白了就是不显示任何信息。
2>&1 ：接着，将标准错误输出重定向 到 标准输出，
因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。
最常用方式：
command > file 2>file与command > file 2>&1
区别在哪里？
首先，command > file 2>file 的意思是将命令所产生的标准输出信息，和错误的输出信息送到file 中.
command > file 2>file 这样的写法，stdout和stderr都直接送到file中， 
file会被打开两次，这样stdout和stderr会互相覆盖，这样写相当使用了FD1和FD2两个同时去抢占file 的管道。
而command >file 2>&1 这条命令就将stdout直接送向file， stderr 继承了FD1管道后，再被送往file，
此时file只被打开了一次，也只使用了一个管道FD1，它包括了stdout和stderr的内容。
从IO效率上，前一条命令的效率要比后面一条的命令效率要低，
所以在编写shell脚本的时候，很多时候会command > file 2>&1 这样的写法。

---------------------------------------------------------------

VMWare centos6 桥接模式网络设置

1、禁用网络管理器
# chkconfig NetworkManager off
# service  NetworkManager stop
2、创建用以桥接的虚拟网卡

# cd /etc/sysconfig/network-scripts 
# cp ifcfg-eth0 ifcfg-br0
3、编辑 ifcfg-br0
# vi ifcfg-br0 

DEVICE=br0
TYPE="Bridge"
ONBOOT="yes"
BOOTPROTO=static
IPADDR=10.10.87.251
PREFIX=24
GATEWAY=10.10.87.254
DNS1=223.5.5.5
DNS2=180.76.76.76

DELAY=0

4、编辑ifcfg-eth0

# vi ifcfg-eth0 

DEVICE=eth0
NM_CONTROLLED="yes"
ONBOOT=yes
TYPE=Ethernet
BRIDGE=br0
BOOTPROTO=none
IPADDR=10.10.87.251
PREFIX=24
GATEWAY=10.10.87.254
DEFROUTE=yes
IPV4_FAILURE_FATAL=yes
IPV6INIT=no
NAME="System eth0"
UUID=3fc763c1-7c6d-4239-9f60-76b1659bfcd1
DNS1=223.5.5.5
DNS2=180.76.76.76
HWADDR=00:0C:29:DE:BF:0D

IPADDR：和你的电脑同一网段的IP地址
GATEWAY：与你的电脑的默认网关相同
5、重新启动网络

# service network restart
6、可能提示以下错误：
Bringing up interface eth0: Device eth0 does not seem to be present,delaying initialization. [FAILED]

解决办法：

首先，打开/etc/udev/rules.d/70-persistent-net.rules内容如下面例子所示：

# vi /etc/udev/rules.d/70-persistent-net.rules
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.
# PCI device 0x1022:0x2000 (pcnet32)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:0c:29:8f:89:9
7", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"
# PCI device 0x1022:0x2000 (pcnet32)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:0c:29:50:bd:1
7", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"
记录下，eth1网卡的mac地址00:0c:29:50:bd:17
接下来，打开/etc/sysconfig/network-scripts/ifcfg-eth0
# vi /etc/sysconfig/network-scripts/ifcfg-eth0

将 DEVICE="eth0" 改成 DEVICE="eth1" ,
将 HWADDR="00:0c:29:8f:89:97" 改成上面的mac地址 HWADDR="00:0c:29:50:bd:17"

最后，重启网络

# service network restart
或者

# /etc/init.d/network restart

------------------------------ubumtu 环境安装---------------------------------
apt-get install lrzsz

ufw status
apt-get install openjdk-7-jdk
ls /usr/lib/jvm
vi /etc/profile
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin:$PATH

apt-get install tomcat7 tomcat7-admin
/var/lib/tomcat7/webapps
/usr/share/tomcat7/bin
/etc/init.d/tomcat7 restart
netstat -ntlp | grep :8080

apt-get install mysql-server
apt-get install mysql-client
/etc/init.d/mysql start
删除mysql
apt-get autoremove --purge mysql-server-5.0
apt-get remove mysql-server
apt-get autoremove mysql-server
apt-get remove mysql-common
清理残留数据
dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P

tail -f /data/tomcat/logs/game_admin/log_

-----------------------------nginx日志切割脚本----------------------------------
#nginx日志切割脚本
#author: http://www.nginx.cn
 
#!/bin/bash
#设置日志文件存放目录
logs_path="/data/env/nginx/logs/"
#设置pid文件
pid_path="/var/run/nginx.pid"
 
#重命名日志文件
mv ${logs_path}access.log ${logs_path}access_$(date -d "yesterday" +"%Y%m%d").log
mv ${logs_path}error.log ${logs_path}error_$(date -d "yesterday" +"%Y%m%d").log
 
#向nginx主进程发信号重新打开日志
kill -USR1 `cat ${pid_path}`



或者将一下配置加入配置文件
if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
    set $year $1;
    set $month $2;
    set $day $3;
}
access_log  /home/wwwlogs/$year-$month-$day-bbs-access.log access;

-----------------------------crontab定时任务----------------------------------
yum -y install crontabs
/sbin/service crond start //启动服务
/sbin/service crond stop //关闭服务
/sbin/service crond restart //重启服务
/sbin/service crond reload //重新载入配置
查看crontab服务是否已设置为开机启动，执行命令：ntsysv
加入开机自动启动:
chkconfig –level 35 crond on

crontab -e 　编辑该用户的计时器设置。
-l 　列出该用户的计时器设置。
-r 　删除该用户的计时器设置。

crontab 设置作业
0 0 * * * bash /etc/nginx/nginx_log.sh

-----------------------------CentOS6.5安装Redis 2.8.7----------------------------------
wget http://download.redis.io/redis-stable.tar.gz
tar xvzf redis-stable.tar.gz
cd redis-stable
make

前面3步应该没有问题，主要的问题是执行make的时候，出现了异常。
异常一：
make[2]: cc: Command not found
异常原因：没有安装gcc
解决方案：yum install gcc-c++

异常二：
zmalloc.h:51:31: error: jemalloc/jemalloc.h: No such file or directory
异常原因：一些编译依赖或原来编译遗留出现的问题
解决方案：make distclean。清理一下，然后再make。

在make成功以后，需要make test。在make test出现异常。
异常一：
couldn't execute "tclsh8.5": no such file or directory
异常原因：没有安装tcl
解决方案：yum install -y tcl。

解决：Creating Server TCP listening socket *:6379: unable to bind socket
将IPv6的网卡进行关闭
添加在redis.conf中添加 bind 0.0.0.0

在make成功以后，会在src目录下多出一些可执行文件：redis-server，redis-cli等等。
方便期间用cp命令复制到usr目录下运行。
cp redis-server /usr/local/bin/
cp redis-cli /usr/local/bin/
然后新建目录，存放配置文件
mkdir /etc/redis
mkdir /var/redis
mkdir /var/redis/log
mkdir /var/redis/run
mkdir /var/redis/6379

在redis解压根目录中找到配置文件模板，复制到如下位置。
cp redis.conf /etc/redis/6379.conf
通过vim命令修改
daemonize yes
pidfile /var/redis/run/redis_6379.pid
logfile /var/redis/log/redis_6379.log
dir /var/redis/6379
#requirepass foobared 去掉前面的注释#，并把foobared 替换为你自己的密码
远程访问
注释掉 #bind 127.0.0.1
最后运行redis：
redis-server /etc/redis/6379.conf
redis-cli -h 127.0.0.1 -p 6379 -a shutdown

redis-cli -h 127.0.0.1 -p 6379 -a 
set user.name name
get user.name

-----------------------------nginx负载均衡以及tomcat session共享----------------------------------
/etc/nginx
nginx -s reload
upstream 127.0.0.1 {
	server 127.0.0.1:18001;
	server 127.0.0.1:28001;
	#根据ip计算将请求分配各那个后端tomcat，许多人误认为可以解决session问题，其实并不能。
	#同一机器在多网情况下，路由切换，ip可能不同
	#ip_hash;
    }
location / {
        proxy_connect_timeout   1;
        proxy_send_timeout      5;
	proxy_read_timeout      5;
	proxy_pass http://127.0.0.1;
	proxy_redirect off;
	proxy_set_header Host $host;  
	proxy_set_header X-Real-IP $remote_addr;  
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
	client_max_body_size 1m;  
	client_body_buffer_size 32k;
	proxy_buffer_size 5k;  
	proxy_buffers 5 32k;  
	proxy_busy_buffers_size 64k;  
	proxy_temp_file_write_size 64k;
    }    
    
tomcat-redis-session
jar包构建
wget https://github.com/jcoleman/tomcat-redis-session-manager/archive/master.zip
找到源码中的 build.gradle文件，注释和增加以下
//signing {
//  sign configurations.archives
//}

task copyJars(type: Copy) {
  from configurations.runtime
  into 'dist'  
}

//repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
      //  authentication(userName: sonatypeUsername, password: sonatypePassword)
      //}
      //repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
      //  authentication(userName: sonatypeUsername, password: sonatypePassword)
      //}

gradle build -x test copyJars

修改配置使用 tomcat-redis-session-manager-master 作为 tomcat session 管理器
　　1、分别将第三步生成的 tomcat-redis-session-manager-master 及依赖jar包覆盖到 tomcat 安装目录的 lib 文件夹
	只需要 jedis-2.5.2.jar commons-pool2-2.2.jar tomcat-redis-session-2.0.0.jar (注意不要和项目里同名包冲突)
　　2、分别修改2台 tomcat 的 context.xml 文件，使 tomcat-redis-session-manager-master 作为session管理器，同时指定redis地址和端口。

　　context.xml 增加以下配置：
<Context>
      <Valve className="com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve" />
      <Manager className="com.orangefunction.tomcat.redissessions.RedisSessionManager"
           host="10.10.84.16"
	   password="44443333"
           port="6379"
           database="0"
           maxInactiveInterval="60" />
</Context>

　　3、分别重启2台 tomcat 服务器。

--------------------------------------centos6.6 gradle安装----------------------------------
http://www.gradle.org/downloads
cd /home/soft/ 
unzip gradle-2.14.1-all.zip -d .
vi /etc/profile
在文件中增加GRADLE_HOME输出路径,并且修订PATH设置如下
export GRADLE_HOME=/home/soft/gradle-2.14.1
export PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin:${GRADLE_HOME}/bin:${JAVA_HOME}:${PATH}
gradle -version
本地18环境



-----------------------------------文本操作-------------------------------------
[options]主要参数：
　　　　-c：只输出匹配行的计数。
　　　　-i：不区分大小写
　　　　－h：查询多文件时不显示文件名。
　　　　－l：查询多文件时只输出包含匹配字符的文件名。
　　　　－n：显示匹配行及行号。
　　　　－s：不显示不存在或无匹配文本的错误信息。
　　　　－v：显示不包含匹配文本的所有行。
pattern正则表达式主要参数：
　　　　\： 忽略正则表达式中特殊字符的原有含义。
　　　　^：匹配正则表达式的开始行。
　　　　$: 匹配正则表达式的结束行。
　　　　\<：从匹配正则表达 式的行开始。
　　　　\>：到匹配正则表达式的行结束。
　　　　[ ]：单个字符，如[A]即A符合要求 。
　　　　[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。
　　　　.：所有的单个字符。
　　　　* ：有字符，长度可以为0。
实例　 
　　(1)grep 'test' d*　　#显示所有以d开头的文件中包含 test的行
　　(2)grep ‘test’ aa bb cc 　　 #显示在aa，bb，cc文件中包含test的行
　　(3)grep ‘[a-z]\{5\}’ aa 　　#显示所有包含每行字符串至少有5个连续小写字符的字符串的行
　　(4)grep magic /usr/src　　#显示/usr/src目录下的文件(不含子目录)包含magic的行
　　(5)grep -r magic /usr/src　　#显示/usr/src目录下的文件(包含子目录)包含magic的行
　　(6)grep -w pattern files ：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)

-----------------------------------术语，参数解释-------------------------------------
us: is meaning of "user CPU time"  用户空间占用CPU百分比
sy: is meaning of "system CPU time"  内核空间占用CPU百分比
ni: is meaning of" nice CPU time"  用户进程空间内改变过优先级的进程占用CPU百分比
id: is meaning of "idle"  空闲CPU百分比
wa: is meaning of "iowait"  等待输入输出的CPU时间百分比
hi：is meaning of "hardware irq"  硬件中断
si : is meaning of "software irq"  软件中断
st : is meaning of "steal time"  实时

