执行sqlite3 .svn/wc.db "select * from work_queue"
看到work_queue中保存的工作队列
执行sqlite3 .svn/wc.db "delete from work_queue" 删除工作队列

svn st | grep '^\?' | tr '^\?' ' ' | sed 's/[ ]*//' | sed 's/[ ]/\\ /g' | xargs svn add
svn st | awk '{if ( $1 == "?") { print $2}}' | xargs svn add
将同一目录下的未加入版本库的文件提交到版本库。 
svn add *
上面只是针对同一目录的文件，如果目录下还有目录，这时上面的命令提交就不行了。如果是二级目录的话。操作命令如下： 
svn add */* 
三目录依次类推。 
svn add */*/* 
svn commit path path path -m ""
svn up
mkdir product && cd product
svn checkout svn://xxx.net/xx/trunk/Server/work ./
svn revert --recursive .

Centos升级svn
[删掉重装，可以直接update升级 yum remove subversion / yum clean all]
cd /etc/yum.repos.d/
cp CentOS-Base.repo CentOS-Base.repo.back
vi CentOS-Base.repo
[WandiscoSVN]
name=Wandisco SVN Repo
baseurl=http://opensource.wandisco.com/centos/$releasever/svn-1.10/RPMS/$basearch/
enabled=1
gpgcheck=0
yum list subversion
yum -y install/update subversion

不同操作系统协同开发，换行符问题
Windows and UNIX system don't use same line-ending, to prevent conflict from happening based on these, you should setup you git config this way:
Windows : git config --global core.autocrlf true
Unix : git config --global core.autocrlf input
Next, to make sure we only commit with ideal whitespace rules, you can set this config option:
git config --global core.whitespace trailing-space,space-before-tab,indent-with-non-tab

git eclipse 冲突解决方法
http://blog.csdn.net/rosten/article/details/17068285

clone失败，更改本地凭证
ssh-keygen -t rsa -C 'Ray820328@163.com'
id_rsa.pub
控制面板\用户帐户\凭据管理器\Windows 凭据
清除账号信息
git config --system --unset credential.helper
不能解决问题那么用这个命令： 
git config -–global http.emptyAuth true
如果两个方法不起作用，采用以下方法：
进入控制面板》用户账号》凭据管理器？windows凭据》普通凭据，在里面找到git，编辑密码，更新为最新密码


git全局ignore文件 + 项目ignore
gitignore_global.txt

git config --global user.name username
git config --global user.email email
git config --list
小乌龟免密码
[credential]
  helper = store

查看远程是否有提交
git fetch
git status -uno
git show-branch *master
changed=0
git remote update && git status -uno | grep -q 'Your branch is behind' && changed=1
if [ $changed = 1 ]; then
    git pull
    echo "Updated successfully";
else
    echo "Up-to-date"
fi

本地和远程hash
git log --pretty=%H ...refs/heads/master^
git ls-remote origin -h refs/heads/master |cut -f1

git rev-list HEAD...origin/master --count
if git checkout master &&
    git fetch origin master &&
    [ `git rev-list HEAD...origin/master --count` != 0 ] &&
    git merge origin/master
then
    echo 'Updated!'
else
    echo 'Not updated.'
fi

【python3】
#strCommand = r'd: && cd {} && git rev-list {}...{} --count'
strCommand = r'cd {} && git rev-list {}...{} --count'
'''Execute commant, return string array.'''
execCommand = strCommand.format(localDir, "HEAD", "origin/master")
#output = os.system(execCommand)
#execCommand = ["git", "rev-list", "HEAD...origin/master", "--count"]
result = run(execCommand, stdout=PIPE, stderr=PIPE, universal_newlines=True, shell=True)
print("status = %s, output = %s" % (result.stderr, result.stdout))
if result.stderr.strip() != "":
   assert False
if result.stdout.strip() != "0":

@echo off
::    
:: Stops commits that have empty log messages.
::

@echo off

set svnlook="svnlook.exe"
setlocal

rem Subversion sends through the path to the repository and transaction id
set REPOS=%1
set TXN=%2

rem check for an empty log message
%svnlook% log %REPOS% -t %TXN% | findstr . > nul
if %errorlevel% gtr 0 (goto err) else exit 0

:err
echo. 1>&2
echo 请填写相关问题ID到修改日志，谢谢！ 1>&2
exit 1

git add . 
git add xx命令可以将xx文件添加到暂存区，如果有很多改动可以通过 git add -A .来一次添加所有改变的文件。注意 -A 选项后面还有一个句点。 git add -A表示添加所有内容， git add . 表示添加新文件和编辑过的文件不包括删除的文件; git add -u 表示添加编辑或者删除的文件，不包括新添加的文件
git commit -m "comment"
git pull [远程主机名] [远程分支名]:[本地分支名] --rebase origin master
git push [远程主机名] [本地分支名]:[远程分支名] -u origin master
git fetch [远程主机名] [分支名]
git checkout -m 版本号 文件/文件夹
git branch -r/-a --来查看远程分支
$ git merge origin/master
# 或者在本地分支上合并远程分支
$ git rebase origin/master
第一种方法
   git fetch --all
   git reset --hard origin/master
   git fetch  下载远程最新的。
   git reset master  分支重置
第二种方法
   git reset --hard HEAD
   git pull
#本地分支和远程分支建立映射关系的作用
git branch --set-upstream-to origin/远程分支名  本地分支名
#拉取分支
git pull
拉取远程分支并创建本地分支
git checkout -b 本地分支名x origin/远程分支名x
使用该方式会在本地新建分支x，并自动切换到该本地分支x。
采用此种方法建立的本地分支会和远程分支建立映射关系。
git fetch origin 远程分支名x:本地分支名x
使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。
采用此种方法建立的本地分支不会和远程分支建立映射关系。
切换分支
git checkout 本地分支名
合并分支
git merge 本地分支名称
建立远程分支
git push origin cola_build:远端分支名
远程分支Chapater6
使用命令 git push origin --delete cola_build
删除本地分支
git branch -d 本地分支名称

保留生产服务器上所做的改动,仅并入新配置项
git stash
git pull
git stash pop
可以使用git diff -w +文件名 来确认代码自动合并的情况

代码库中的文件完全覆盖本地工作版本
git reset --hard
git pull
针对文件回退本地修改
git checkout HEAD file/to/restore

工作区和暂存区的区别 git diff
工作区和版本库的区别 git diff HEAD
暂存区和版本库的区别 git diff --cached
git log --oneline --graph
merge git reset --merge 7f811bf 或 git reset --merge HEAD^
git clean -f
---------------------------

git 拉取远程分支到本地
1、新建一个空目录，进入目录
2、初始化
git init
3、自己要与origin master建立连接（下划线为远程仓库链接）
git remote add origin https://github.com/ray820328/study.git
4、把远程分支拉到本地
git fetch origin develop（develop为远程仓库的分支名）
5、在本地创建分支dev并切换到该分支
git checkout -b dev(本地分支名称) origin/develop(远程分支名称)
6、把某个分支上的内容都拉取到本地
git pull origin develop(远程分支名称)
7、获取子模块
git submodule update --init --recursive
----------------------------

git合并分支，解决冲突
1，先检出项目到一个文件夹
git clone

2，你检出的项目默认是master，所以现在要查看远程全部分支
git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/v1.2
  remotes/origin/master
  remotes/origin/v1.1
  remotes/origin/v1.0

3，切换分支
比如同时有三个人开发，1.2最早是基于1.0，但是由于项目未发布，1.0,1.1,1.2全部都在同时开发，现在想把1.0已经增加的功能先合并到1.2；
此时的步骤：check 1.2和1.0
git checkout v1.0 
git checkout v1.2

然后再v1.2的分支基础上执行merge
git merge v1.0

如果没有报错，那就直接提交代码git push origin v1.2
如果报错，基本是冲突了(比如)：
CONFLICT (content): Merge conflict in app/src/main/AndroidManifest.xml
Auto-merging app/build.gradle
CONFLICT (content): Merge conflict in app/build.gradle
Automatic merge failed; fix conflicts and then commit the result.
你需要去到提示的文件里把git自动标注的版本冲突注释掉，看你具体需要的功能进行删减

然后把冲突的文件git add，和commit 
比如有2个冲突文件，多文件add的时候直接空格隔开
git add app/src/main/AndroidManifest.xml app/build.gradle
最后再commit
git commit -m "解决2个分支之间的冲突"

4，提交代码
git push origin v1.2

5，参考命令：
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

git restore -s HEAD~1 READEME.md  // 将版本回退到当前快照的前一个版本
git restore -s 91410eb9  READEME.md  // 指定明确的 commit id ，回退到指定的快照中
git reset --soft HEAD^  // 撤销 commit 至上一次 commit 的版本
git restore --worktree README.md	表示撤销 README.md 文件工作区的的修改	参数等同于 -W
git restore --staged README.md	表示撤销暂存区的修改，将文件状态恢复到未 add 之前	参数等同于 -S

删除 一些 没有 git add 的 文件；
git clean -d -fx
    -n 显示将要删除的文件和目录；
    -x -----删除忽略文件已经对git来说不识别的文件
    -d -----删除未被添加到git的路径中的文件
    -f -----强制运行
 
 
代码回滚
https://blog.csdn.net/asoar/article/details/84111841

在上传代码到远程仓库的时候，不免会出现问题，任何过程都有可能要回滚代码：
1、在工作区的代码
git checkout -- a.txt   # 丢弃某个文件，或者
git checkout -- .       # 丢弃全部
注意：git checkout – . 丢弃全部，也包括：新增的文件会被删除、删除的文件会恢复回来、修改的文件会回去。这几个前提都说的是，回到暂存区之前的样子。对之前保存在暂存区里的代码不会有任何影响。对commit提交到本地分支的代码就更没影响了。当然，如果你之前压根都没有暂存或commit，那就是回到你上次pull下来的样子了。

2、代码git add到缓存区，并未commit提交
git reset HEAD .  或者
git reset HEAD a.txt

这个命令仅改变暂存区，并不改变工作区，这意味着在无任何其他操作的情况下，工作区中的实际文件同该命令运行之前无任何变化

3、git commit到本地分支、但没有git push到远程
git log # 得到你需要回退一次提交的commit id
git reset --hard <commit_id>  # 回到其中你想要的某个版
或者
git reset --hard HEAD^  # 回到最新的一次提交
或者
git reset HEAD^  # 此时代码保留，回到 git add 之前

4、git push把修改提交到远程仓库
1）通过git reset是直接删除指定的commit
git log # 得到你需要回退一次提交的commit id
git reset --hard <commit_id>
git push origin HEAD --force # 强制提交一次，之前错误的提交就从远程仓库删除

2）通过git revert是用一次新的commit来回滚之前的commit
git log # 得到你需要回退一次提交的commit id
git revert <commit_id>  # 撤销指定的版本，撤销也会作为一次提交进行保存

3） git revert 和 git reset的区别
- git revert是用一次新的commit来回滚之前的commit，此次提交之前的commit都会被保留；
- git reset是回到某次提交，提交及之前的commit都会被保留，但是此commit id之后的修改都会被删除

场景一：
糟了，我刚把不想要的代码，commit到本地仓库中了，但是还没有做push操作！
场景二：
彻底完了，刚线上更新的代码出现问题了，需要还原这次提交的代码！
场景三：
刚才我发现之前的某次提交太愚蠢了，现在想要干掉它！

撤销
上述场景一，在未进行git push前的所有操作，都是在“本地仓库”中执行的。我们暂且将“本地仓库”的代码还原操作叫做“撤销”！
情况一：文件被修改了，但未执行git add操作(working tree内撤销)
git checkout fileName
git checkout .
情况二：同时对多个文件执行了git add操作，但本次只想提交其中一部分文件
$ git add *
$ git status
# 取消暂存
$ git reset HEAD <filename>
情况三：文件执行了git add操作，但想撤销对其的修改（index内回滚）
# 取消暂存
git reset HEAD fileName
# 撤销修改
git checkout fileName
情况四：修改的文件已被git commit，但想再次修改不再产生新的Commit
# 修改最后一次提交 
$ git add sample.txt
$ git commit --amend -m"说明"
情况五：已在本地进行了多次git commit操作，现在想撤销到其中某次Commit
git reset [--hard|soft|mixed|merge|keep] [commit|HEAD]
具体参数和使用说明，请查看：Git Pro深入浅出（二）中的重置揭秘部分

回滚
上述场景二，已进行git push，即已推送到“远程仓库”中。我们将已被提交到“远程仓库”的代码还原操作叫做“回滚”！注意：对远程仓库做回滚操作是有风险的，需提前做好备份和通知其他团队成员！
如果你每次更新线上，都会打tag，那恭喜你，你可以很快的处理上述场景二的情况
git checkout <tag>
如果你回到当前HEAD指向
git checkout <branch_name>
情况一：撤销指定文件到指定版本
# 查看指定文件的历史版本
git log <filename>
# 回滚到指定commitID
git checkout <commitID> <filename>
情况二：删除最后一次远程提交
方式一：使用revert
git revert HEAD
git push origin master
方式二：使用reset
git reset --hard HEAD^
git push origin master -f
二者区别：
revert是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在；
reset是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。
情况三：回滚某次提交
# 找到要回滚的commitID
git log
git revert commitID
删除某次提交
git log --oneline -n5
git rebase -i "commit id"^
注意：需要注意最后的^号，意思是commit id的前一次提交
git rebase -i "5b3ba7a"^
在编辑框中删除相关commit，如pick 5b3ba7a test2，然后保存退出（如果遇到冲突需要先解决冲突）！
git push origin master -f
通过上述操作，如果你想对历史多个commit进行处理或者，可以选择git rebase -i，只需删除对应的记录就好。rebase还可对 commit 消息进行编辑，以及合并多个commit。

git tag管理
列出已有的tag
git tag -l "v0.1.*"
新建tag
git tag v0.1.2
git tag -a v0.1.2 -m "my tag"
查看tag详细信息
git show v0.1.2
给指定的某个commit号加tag
打tag不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取，取校验和的前几位数字即可）。
git tag -a v0.1.2 9fceb02 -m "my tag"
将tag同步到远程服务器
同提交代码后，使用git push来推送到远程服务器一样，tag也需要进行推送才能到远端服务器。
推送单个分支。
git push origin v0.1.2
推送本地所有tag
git push origin --tags
切换到某个tag
跟分支一样，可以直接切换到某个tag去。这个时候不位于任何分支，处于游离状态，可以考虑基于这个tag创建一个分支
git checkout v0.1.2
本地删除
git tag -d v0.1.2
远端删除
git push origin :refs/tags/v0.1.2

--------------------- 

mac免密码git
在~/下， touch创建文件 .git-credentials：
touch .git-credentials
# 用vim编辑此文件，
vim .git-credentials
#输入内容格式
https://username:password@github.com
git config --global credential.helper store
可以看到~/.gitconfig文件，会多了一项：
[credential]
    helper = store
删除保存的密码
git credential-osxkeychain erase
https://my.oschina.net/yangq20/blog/803036
https://www.cnblogs.com/SUPER-F/p/7298556.html
