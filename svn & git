执行sqlite3 .svn/wc.db "select * from work_queue"
看到work_queue中保存的工作队列
执行sqlite3 .svn/wc.db "delete from work_queue" 删除工作队列

git eclipse 冲突解决方法
http://blog.csdn.net/rosten/article/details/17068285

clone失败，更改本地凭证
ssh-keygen -t rsa -C 'Ray820328@163.com'
id_rsa.pub
控制面板\用户帐户\凭据管理器\Windows 凭据
清除账号信息
git config --system --unset credential.helper

git全局ignore文件 + 项目ignore
gitignore_global.txt

@echo off
::    
:: Stops commits that have empty log messages.
::

@echo off

set svnlook="svnlook.exe"
setlocal

rem Subversion sends through the path to the repository and transaction id
set REPOS=%1
set TXN=%2

rem check for an empty log message
%svnlook% log %REPOS% -t %TXN% | findstr . > nul
if %errorlevel% gtr 0 (goto err) else exit 0

:err
echo. 1>&2
echo 请填写相关问题ID到修改日志，谢谢！ 1>&2
exit 1

git add . 
git add xx命令可以将xx文件添加到暂存区，如果有很多改动可以通过 git add -A .来一次添加所有改变的文件。注意 -A 选项后面还有一个句点。 git add -A表示添加所有内容， git add . 表示添加新文件和编辑过的文件不包括删除的文件; git add -u 表示添加编辑或者删除的文件，不包括新添加的文件
git commit -m "comment"
git pull [远程主机名] [远程分支名]:[本地分支名] --rebase origin master
git push [远程主机名] [本地分支名]:[远程分支名] -u origin master
git fetch [远程主机名] [分支名]
git checkout -m 版本号 文件/文件夹
git branch -r/-a --来查看远程分支
$ git merge origin/master
# 或者在本地分支上合并远程分支
$ git rebase origin/master
第一种方法
   git fetch --all
   git reset --hard origin/master
   git fetch  下载远程最新的。
   git reset master  分支重置
第二种方法
   git reset --hard HEAD
   git pull
#本地分支和远程分支建立映射关系的作用
git branch --set-upstream-to origin/远程分支名  本地分支名
#拉取分支
git pull
拉取远程分支并创建本地分支
git checkout -b 本地分支名x origin/远程分支名x
使用该方式会在本地新建分支x，并自动切换到该本地分支x。
采用此种方法建立的本地分支会和远程分支建立映射关系。
git fetch origin 远程分支名x:本地分支名x
使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。
采用此种方法建立的本地分支不会和远程分支建立映射关系。
切换分支
git checkout 本地分支名
合并分支
git merge 本地分支名称
建立远程分支
git push origin cola_build:远端分支名
远程分支Chapater6
使用命令 git push origin --delete cola_build
删除本地分支
git branch -d 本地分支名称

保留生产服务器上所做的改动,仅并入新配置项
git stash
git pull
git stash pop
可以使用git diff -w +文件名 来确认代码自动合并的情况

代码库中的文件完全覆盖本地工作版本
git reset --hard
git pull
针对文件回退本地修改
git checkout HEAD file/to/restore

工作区和暂存区的区别 git diff
工作区和版本库的区别 git diff HEAD
暂存区和版本库的区别 git diff --cached
git log --oneline --graph
merge git reset --merge 7f811bf 或 git reset --merge HEAD^
git clean -f
---------------------------

git 拉取远程分支到本地
1、新建一个空目录，进入目录
2、初始化
git init
3、自己要与origin master建立连接（下划线为远程仓库链接）
git remote add origin https://github.com/ray820328/study.git
4、把远程分支拉到本地
git fetch origin develop（develop为远程仓库的分支名）
5、在本地创建分支dev并切换到该分支
git checkout -b dev(本地分支名称) origin/develop(远程分支名称)
6、把某个分支上的内容都拉取到本地
git pull origin develop(远程分支名称)
----------------------------

git合并分支，解决冲突
1，先检出项目到一个文件夹
git clone

2，你检出的项目默认是master，所以现在要查看远程全部分支
git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/v1.2
  remotes/origin/master
  remotes/origin/v1.1
  remotes/origin/v1.0

3，切换分支
比如同时有三个人开发，1.2最早是基于1.0，但是由于项目未发布，1.0,1.1,1.2全部都在同时开发，现在想把1.0已经增加的功能先合并到1.2；
此时的步骤：check 1.2和1.0
git checkout v1.0 
git checkout v1.2

然后再v1.2的分支基础上执行merge
git merge v1.0

如果没有报错，那就直接提交代码git push origin v1.2
如果报错，基本是冲突了(比如)：
CONFLICT (content): Merge conflict in app/src/main/AndroidManifest.xml
Auto-merging app/build.gradle
CONFLICT (content): Merge conflict in app/build.gradle
Automatic merge failed; fix conflicts and then commit the result.
你需要去到提示的文件里把git自动标注的版本冲突注释掉，看你具体需要的功能进行删减

然后把冲突的文件git add，和commit 
比如有2个冲突文件，多文件add的时候直接空格隔开
git add app/src/main/AndroidManifest.xml app/build.gradle
最后再commit
git commit -m "解决2个分支之间的冲突"

4，提交代码
git push origin v1.2

5，参考命令：
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
--------------------- 

