kill关键字相关进程
procid=$(ps -ef | grep "logic_server" | grep "java" | awk '{print $2;}')
if [ "${procid}" == "" ]; then
	break
fi
kill -TERM ${procid}

Win：
命令行查看库文件依赖状态（VS2013 x64 本机工具命令提示）
dumpbin /dependents xxx.dll

netstat -ano | findstr "8080"
taskkill /f /t /im "进程id或者进程名称"

@echo 开始注册dll
copy system.xml.dll %windir%\system32\
regsvr32 %windir%\system32\system.xml.dll /s
@echo system.xml.dll注册成功

转换sh格式
:set ff
:set ff=unix

当前目录下所有文件的行数
wc –l ./*

date +%Y%m%d_%H%M%S

下载sh直接执行
curl -H "X-PROJECT-ID: xxx" http://xxx/install | bash

git hooks提交检测
#!/usr/bin/env bash
lua_files=$(git status -s|awk '{if (($1=="M"||$1=="A") && $2 ~ /.lua$/)print $2;}')
if [[ "$lua_files" != "" ]]; then
    result=$(luacheck $lua_files)

    if [[ "$result" =~ .*:.*:.*: ]]; then
        echo "$result"
        echo ""
        exec < /dev/tty
        read -p "Abort commit?(Y/n)"

        if [[ "$REPLY" == y* ]] || [[ "$REPLY" == Y* ]]; then
            echo "Abort commit"
            exit 1
        fi
    fi
fi

逻辑与
if [表达式1 –a 表达式2]
逻辑或 -o 条件表达式的或
if [表达式1 –o 表达式2]

sed -n '/scriptingDefineSymbols/,/platformArchitecture/p' /xxx/ProjectSettings.asset

取路径、文件名、后缀
先赋值一个变量为一个路径，如下：
file=/dir1/dir2/dir3/my.file.txt
${file#*/}    拿掉第一条 / 及其左边的字符串    dir1/dir2/dir3/my.file.txt
[root@localhost ~]# echo ${file#*/}
dir1/dir2/dir3/my.file.txt
${file##*/}    拿掉最后一条 / 及其左边的字符串    my.file.txt
[root@localhost ~]# echo ${file##*/}
my.file.txt
${file#*.}    拿掉第一个 . 及其左边的字符串    file.txt
[root@localhost ~]# echo ${file#*.}
file.txt
${file##*.}    拿掉最后一个 . 及其左边的字符串    txt
[root@localhost ~]# echo ${file##*.}
txt
${file%/*}    拿掉最后一条 / 及其右边的字符串    /dir1/dir2/dir3
[root@localhost ~]# echo ${file%/*}
/dir1/dir2/dir3
${file%%/*}    拿掉第一条 / 及其右边的字符串    (空值)
[root@localhost ~]# echo ${file%%/*}
(空值)
${file%.*}    拿掉最后一个 . 及其右边的字符串    /dir1/dir2/dir3/my.file
[root@localhost ~]# echo ${file%.*}
/dir1/dir2/dir3/my.file
${file%%.*}    拿掉第一个 . 及其右边的字符串    /dir1/dir2/dir3/my￼
[root@localhost ~]# echo ${file%%.*}
/dir1/dir2/dir3/my
记忆方法如下：
# 是去掉左边(在键盘上 # 在 $ 之左边)
% 是去掉右边(在键盘上 % 在 $ 之右边)
单一符号是最小匹配;两个符号是最大匹配
*是用来匹配不要的字符，也就是想要去掉的那部分
还有指定字符分隔号，与*配合，决定取哪部分

取子串及替换
${file:0:5}            　　　提取最左边的 5 个字节    　　　　　　　　　　　　/dir1
${file:5:5}            　　　提取第 5 个字节右边的连续 5 个字节    　　　　　/dir2
${file/dir/path}            将第一个 dir 提换为 path    　　　　　　　　　 /path1/dir2/dir3/my.file.txt
${file//dir/path}    　　　　将全部 dir 提换为 path    　　　　　　　　　　　/path1/path2/path3/my.file.txt
${#file}    　　　　　　　　　 获取变量长度    　　　　　　　　　　　　　　　　　27                            

根据状态为变量赋值
${file-my.file.txt}	若 $file 没设定,则使用 my.file.txt 作传回值	空值及非空值不作处理
${file:-my.file.txt}	若 $file 没有设定或为空值,则使用 my.file.txt 作传回值	非空值时不作处理
${file+my.file.txt}	若$file 设为空值或非空值,均使用my.file.txt作传回值	没设定时不作处理
${file:+my.file.txt}	若 $file 为非空值,则使用 my.file.txt 作传回值	没设定及空值不作处理
${file=txt}	若 $file 没设定,则回传 txt ,并将 $file 赋值为 txt	空值及非空值不作处理
${file:=txt}	若 $file 没设定或空值,则回传 txt ,将 $file 赋值为txt	非空值时不作处理
${file?my.file.txt}	若 $file 没设定,则将 my.file.txt 输出至 STDERR	空值及非空值不作处理
${file:?my.file.txt}	若 $file没设定或空值,则将my.file.txt输出至STDERR	非空值时不作处理
以上的理解在于, unset 与 null 及 non-null 这三种赋值状态. 一般而言, : 与 null 有关, 若不带 : 的话, null 不受影响, 若带 : 则连 null 也受影响.

数组
A="a b c def"   # 定义字符串
A=(a b c def)   # 定义字符数组
${A[@]}	返回数组全部元素	a b c def
${A[*]}	同上	a b c def
${A[0]}	返回数组第一个元素	a
${#A[@]}	返回数组元素总个数	4
${#A[*]}	同上	4
${#A[3]}	返回第四个元素的长度，即def的长度	3
A[3]=xzy	则是将第四个组数重新定义为 xyz

$(( ))与整数运算
bash中整数运算符号
+ - * /	分别为加、减、乘、除
%	余数运算
& | ^ !	分别为“AND、OR、XOR、NOT”
 在 $(( )) 中的变量名称,可于其前面加 $ 符号来替换,也可以不用。
[root@localhost ~]# echo $((2*3))
6
[root@localhost ~]# a=5;b=7;c=2
[root@localhost ~]# echo $((a+b*c))
19
[root@localhost ~]# echo $(($a+$b*$c))
19

进制转换
$(( ))可以将其他进制转成十进制数显示出来。用法如下：
echo $((N#xx))
其中，N为进制，xx为该进制下某个数值，命令执行后可以得到该进制数转成十进制后的值。
[root@localhost ~]# echo $((2#110))
6
[root@localhost ~]# echo $((16#2a))
42
[root@localhost ~]# echo $((8#11))
9
10进制转16
printf "%x" 128

(())重定义变量值
[root@localhost ~]# a=5;b=7
[root@localhost ~]# ((a++))
[root@localhost ~]# echo $a
6
[root@localhost ~]# ((a--));echo $a
5
[root@localhost ~]# ((a<b));echo $?
0
[root@localhost ~]# ((a>b));echo $?
1
